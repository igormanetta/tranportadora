// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const deleteMotorista = `-- name: DeleteMotorista :exec
DELETE FROM motorista
WHERE id = $1
`

func (q *Queries) DeleteMotorista(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMotorista, id)
	return err
}

const deleteVeiculo = `-- name: DeleteVeiculo :exec
DELETE FROM veiculo
WHERE id = $1
`

func (q *Queries) DeleteVeiculo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteVeiculo, id)
	return err
}

const getMotorista = `-- name: GetMotorista :one
SELECT
    "id", "nome", "veiculo_id"
FROM motorista
WHERE
    id = $1
`

type GetMotoristaRow struct {
	ID        uuid.UUID `db:"id"`
	Nome      string    `db:"nome"`
	VeiculoID uuid.UUID `db:"veiculo_id"`
}

func (q *Queries) GetMotorista(ctx context.Context, id uuid.UUID) (GetMotoristaRow, error) {
	row := q.db.QueryRow(ctx, getMotorista, id)
	var i GetMotoristaRow
	err := row.Scan(&i.ID, &i.Nome, &i.VeiculoID)
	return i, err
}

const getMotoristaByVeiculo = `-- name: GetMotoristaByVeiculo :many
SELECT
    "id", "nome", "veiculo_id"
FROM motorista
WHERE
    veiculo_id = $1
`

type GetMotoristaByVeiculoRow struct {
	ID        uuid.UUID `db:"id"`
	Nome      string    `db:"nome"`
	VeiculoID uuid.UUID `db:"veiculo_id"`
}

func (q *Queries) GetMotoristaByVeiculo(ctx context.Context, veiculoID uuid.UUID) ([]GetMotoristaByVeiculoRow, error) {
	rows, err := q.db.Query(ctx, getMotoristaByVeiculo, veiculoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMotoristaByVeiculoRow
	for rows.Next() {
		var i GetMotoristaByVeiculoRow
		if err := rows.Scan(&i.ID, &i.Nome, &i.VeiculoID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVeiculo = `-- name: GetVeiculo :one
SELECT
    "id", "placa"
FROM veiculo
WHERE id = $1
`

func (q *Queries) GetVeiculo(ctx context.Context, id uuid.UUID) (Veiculo, error) {
	row := q.db.QueryRow(ctx, getVeiculo, id)
	var i Veiculo
	err := row.Scan(&i.ID, &i.Placa)
	return i, err
}

const insertMotorista = `-- name: InsertMotorista :one
INSERT INTO motorista
    ( "nome" ) VALUES
    ( $1 )    
RETURNING "id"
`

func (q *Queries) InsertMotorista(ctx context.Context, nome string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertMotorista, nome)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertVeiculo = `-- name: InsertVeiculo :one
INSERT INTO veiculo
    ( "placa" ) VALUES
    ( $1 )
RETURNING "id"
`

func (q *Queries) InsertVeiculo(ctx context.Context, placa string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertVeiculo, placa)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const setMotoristaVeiculo = `-- name: SetMotoristaVeiculo :one
UPDATE motorista
SET
    veiculo_id = $1
WHERE
    id = $2
RETURNING "id"
`

type SetMotoristaVeiculoParams struct {
	VeiculoID uuid.UUID `db:"veiculo_id"`
	ID        uuid.UUID `db:"id"`
}

func (q *Queries) SetMotoristaVeiculo(ctx context.Context, arg SetMotoristaVeiculoParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, setMotoristaVeiculo, arg.VeiculoID, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateMotorista = `-- name: UpdateMotorista :one
UPDATE motorista
SET
    nome = $1
WHERE
    id = $2
RETURNING "id"
`

type UpdateMotoristaParams struct {
	Nome string    `db:"nome"`
	ID   uuid.UUID `db:"id"`
}

func (q *Queries) UpdateMotorista(ctx context.Context, arg UpdateMotoristaParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateMotorista, arg.Nome, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateVeiculo = `-- name: UpdateVeiculo :one
UPDATE veiculo
SET
    placa = $1
WHERE
    id = $2
RETURNING "id"
`

type UpdateVeiculoParams struct {
	Placa string    `db:"placa"`
	ID    uuid.UUID `db:"id"`
}

func (q *Queries) UpdateVeiculo(ctx context.Context, arg UpdateVeiculoParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateVeiculo, arg.Placa, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
